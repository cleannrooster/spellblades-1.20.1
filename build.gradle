plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.1.2"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}


repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'https://maven.shedaniel.me/' }
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven { url 'https://maven.terraformersmc.com/' }
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {url 'https://libs.azuredoom.com:4443/mods'}
	maven { url 'https://maven.kosmx.dev/' }
	maven { url 'https://maven.shedaniel.me/' }
	maven { url 'https://jitpack.io' }
	maven {
		name = 'Modrinth'
		url = 'https://api.modrinth.com/maven'
		content {
			includeGroup 'maven.modrinth'
		}
	}
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
}
loom {
}


dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	// modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version_api}"

	// Dependencies
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	implementation include("com.github.ZsoltMolnarrr:TinyConfig:${project.tiny_config_version}")

	modImplementation "mod.azure.azurelib:azurelib-fabric-1.20.1:1.0.29"

	modImplementation("maven.modrinth:spell-power:${project.spell_power_version}-fabric")
	modImplementation("maven.modrinth:runes:${project.runes_version}-fabric")
	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim_version}")
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modCompileOnly fileTree(dir: "run/mods", includes: ['*.jar'])

	include(implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))
	modImplementation("dev.emi:trinkets:${project.trinkets_version}")
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
if(project.hasProperty('release_type')) {
	tasks.register("publishMod") {
		dependsOn(build)
		finalizedBy(tasks.curseforge)
		finalizedBy(tasks.modrinth)
		finalizedBy(tasks.githubRelease)
	}

	curseforge {
		apiKey = System.getenv("CLEANNCURSE")
		project {
			id = System.getenv("CLEANNCURSE")
			changelog = changelog_last_section()
			changelogType = 'markdown'
			releaseType = release_type
			addGameVersion "${project.minecraft_version}"
			addGameVersion "Fabric"

			relations {
				requiredDependency 'fabric-api'
				requiredDependency 'azurelib'
				requiredDependency 'spell-engine'
				requiredDependency 'ranged-weapon-api'
			}

			mainArtifact(remapJar)
			afterEvaluate {
				uploadTask.dependsOn(remapJar)
			}
			options {
				forgeGradleIntegration = false
			}
		}
	}
	modrinth {
		token = System.getenv("MODRNTH_CLEANN")
		projectId = System.getenv("MORTINTH_CLEANN") // This can be the project ID or the slug. Either will work!
		versionName = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
		versionNumber = "${version}" // You don't need to set this manually. Will fail if Modrinth has this version already
		versionType = release_type // This is the default -- can also be `beta` or `alpha`
		uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
		gameVersions = ["${project.minecraft_version}"] // Must be an array, even with only one version
		loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
		changelog = changelog_last_section()
		dependencies { // A special DSL for creating dependencies
			// scope.type
			// The scope can be `required`, `optional`, `incompatible`, or `embedded`
			// The type can either be `project` or `version`
			required.project 'fabric-api'
			required.project 'azurelib'
			required.project 'spell-engine'
			required.project 'ranged-weapon-api'
		}
	}

	githubRelease {
		token System.getenv("GIT_KEY") // This is your personal access token with Repo permissions
		owner System.getenv("GH_OWNER") // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
		repo System.getenv("GH_REPO") // by default this is set to your project name
		tagName "${version}" // by default this is set to "v${project.version}"
		targetCommitish "" // by default this is set to "main"
		releaseName "Release" // Release title, by default this is the same as the tagName
		generateReleaseNotes false // Generate release notes automatically, if true and body is present, body will be pre-pended, if name is not given, one will be generated by the tag
		// body.set "" // by default this is empty
		draft false // by default this is true
		prerelease release_type != "release" // by default this is false
		// releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release, by default this is empty
		allowUploadToExisting false // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
		overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
		// dryRun true // by default false; you can use this to see what actions would be taken without making a release
		apiEndpoint "https://api.github.com" // should only change for github enterprise users
		client // This is the okhttp client used for http requests
	}
}